#!/usr/bin/env python3
"""
MAC ETF SCHEDULER DAEMON - Prevence usp√°n√≠ Macu bƒõhem scrapingu
Pou≈æ√≠v√° macOS caffeinate pro zabr√°nƒõn√≠ sp√°nku bƒõhem dlouh√Ωch operac√≠
"""

import schedule
import time
import subprocess
import logging
import signal
import sys
import os
from datetime import datetime

# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mac_etf_scheduler.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MacETFScheduler:
    def __init__(self):
        self.automation_script = "complete_automation.py"
        self.caffeinate_process = None
        self.running = True
        
        # Signal handlers pro graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """Graceful shutdown handler"""
        logger.info(f"üì∂ P≈ôijat sign√°l {signum}, ukonƒçuji scheduler...")
        self.running = False
        if self.caffeinate_process:
            self.caffeinate_process.terminate()
        sys.exit(0)
    
    def prevent_sleep(self):
        """Zabr√°n√≠ usp√°n√≠ Macu pomoc√≠ caffeinate"""
        try:
            logger.info("‚òï Spou≈°t√≠m caffeinate - Mac se neusp√≠ bƒõhem scrapingu")
            # Spust√≠ caffeinate na pozad√≠ - zabr√°n√≠ sp√°nku displeje i syst√©mu
            self.caffeinate_process = subprocess.Popen([
                'caffeinate', 
                '-d',  # Zabr√°n√≠ sp√°nku displeje
                '-i',  # Zabr√°n√≠ sp√°nku p≈ôi neƒçinnosti
                '-s',  # Zabr√°n√≠ sp√°nku syst√©mu
                '-u'   # Vytvo≈ô√≠ user assertion (simulator user activity)
            ])
            logger.info("‚úÖ Caffeinate aktivn√≠ - Mac z≈Østane bdƒõl√Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå Chyba p≈ôi spou≈°tƒõn√≠ caffeinate: {e}")
            return False
    
    def allow_sleep(self):
        """Povol√≠ usp√°n√≠ Macu ukonƒçen√≠m caffeinate"""
        if self.caffeinate_process:
            try:
                logger.info("üí§ Ukonƒçuji caffeinate - Mac se m≈Ø≈æe uspat")
                self.caffeinate_process.terminate()
                self.caffeinate_process.wait()
                self.caffeinate_process = None
                logger.info("‚úÖ Caffeinate ukonƒçen - Mac m≈Ø≈æe sp√°t norm√°lnƒõ")
            except Exception as e:
                logger.error(f"‚ùå Chyba p≈ôi ukonƒçov√°n√≠ caffeinate: {e}")
    
    def run_etf_update_with_prevention(self):
        """Spust√≠ ETF update s prevenc√≠ usp√°n√≠"""
        update_start = datetime.now()
        logger.info("üåô NOƒåN√ç ETF UPDATE - START")
        logger.info(f"ƒåas: {update_start}")
        
        # Zabr√°n√≠ usp√°n√≠ p≈ôed zaƒç√°tkem
        sleep_prevented = self.prevent_sleep()
        
        try:
            # Spust√≠ complete automation
            logger.info("üöÄ Spou≈°t√≠m ETF scraping...")
            result = subprocess.run([
                "python3", self.automation_script,
                "--batch-size", "50"
            ], capture_output=True, text=True, timeout=14400)  # 4 hodiny timeout
            
            update_end = datetime.now()
            duration = update_end - update_start
            
            if result.returncode == 0:
                logger.info("‚úÖ Noƒçn√≠ ETF update √∫spƒõ≈°n√Ω")
                logger.info(f"‚è±Ô∏è  Doba trv√°n√≠: {duration}")
                logger.info("üìù Posledn√≠ch 500 znak≈Ø v√Ωstupu:")
                logger.info(result.stdout[-500:])
            else:
                logger.error(f"‚ùå Noƒçn√≠ ETF update selhal: {result.returncode}")
                logger.error(f"‚ùå Chyba: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå ETF update timeout (v√≠ce ne≈æ 4 hodiny)")
        except Exception as e:
            logger.error(f"‚ùå Chyba p≈ôi spou≈°tƒõn√≠ noƒçn√≠ho update: {e}")
        finally:
            # V≈ædy povol usp√°n√≠ po dokonƒçen√≠
            if sleep_prevented:
                self.allow_sleep()
            
            update_end = datetime.now()
            total_duration = update_end - update_start
            logger.info(f"üèÅ Noƒçn√≠ update dokonƒçen, celkov√Ω ƒças: {total_duration}")
    
    def start_scheduler(self):
        """Spust√≠ scheduler s prevenc√≠ usp√°n√≠"""
        logger.info("="*60)
        logger.info("ü§ñ MAC ETF SCHEDULER DAEMON SPU≈†TƒöN")
        logger.info("="*60)
        logger.info("Pl√°novan√© ƒçasy:")
        logger.info("  - Ka≈æd√Ω den v 02:00 (noƒçn√≠ update)")
        logger.info("Funkce:")
        logger.info("  ‚òï Caffeinate - zabr√°n√≠ usp√°n√≠ bƒõhem scrapingu")
        logger.info("  üåô Optimalizov√°no pro noƒçn√≠ bƒõh")
        logger.info("  üì± Graceful shutdown na SIGINT/SIGTERM")
        logger.info("="*60)
        
        # Kontrola dostupnosti caffeinate
        try:
            subprocess.run(['caffeinate', '-t', '1'], check=True, capture_output=True)
            logger.info("‚úÖ Caffeinate dostupn√Ω")
        except:
            logger.warning("‚ö†Ô∏è  Caffeinate nen√≠ dostupn√Ω - Mac se m≈Ø≈æe uspat bƒõhem scrapingu")
        
        # Napl√°nuj √∫kol - 1x dennƒõ v noci
        schedule.every().day.at("02:00").do(self.run_etf_update_with_prevention)
        
        logger.info("üéØ Scheduler aktivn√≠, ƒçek√°m na 02:00...")
        
        # Hlavn√≠ smyƒçka
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # Kontroluj ka≈ædou minutu
            except KeyboardInterrupt:
                logger.info("üõë Scheduler ukonƒçen u≈æivatelem (Ctrl+C)")
                break
            except Exception as e:
                logger.error(f"‚ùå Chyba v scheduleru: {e}")
                time.sleep(300)  # Poƒçkaj 5 minut p≈ôi chybƒõ
        
        # Cleanup p≈ôi ukonƒçen√≠
        self.allow_sleep()
        logger.info("üëã Mac ETF Scheduler daemon ukonƒçen")

def main():
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        # Test re≈æim - spust√≠ update ihned s prevenc√≠ usp√°n√≠
        logger.info("üß™ TEST MODE - spou≈°t√≠m noƒçn√≠ ETF update ihned")
        scheduler = MacETFScheduler()
        scheduler.run_etf_update_with_prevention()
        return
    
    # Kontrola bƒõ≈æ√≠c√≠ho procesu
    try:
        result = subprocess.run(['pgrep', '-f', 'mac_scheduler_daemon.py'], 
                              capture_output=True, text=True)
        if result.stdout.strip():
            existing_pids = result.stdout.strip().split('\n')
            current_pid = str(os.getpid())
            other_pids = [pid for pid in existing_pids if pid != current_pid]
            
            if other_pids:
                logger.warning(f"‚ö†Ô∏è  Jin√Ω scheduler daemon u≈æ bƒõ≈æ√≠ (PID: {', '.join(other_pids)})")
                logger.warning("Ukonƒçete ho p≈ôed spu≈°tƒõn√≠m nov√©ho:")
                logger.warning(f"kill {' '.join(other_pids)}")
                sys.exit(1)
    except:
        pass  # Nen√≠ kritick√© pokud pgrep sel≈æe
    
    # Norm√°ln√≠ daemon re≈æim
    scheduler = MacETFScheduler()
    scheduler.start_scheduler()

if __name__ == "__main__":
    main()